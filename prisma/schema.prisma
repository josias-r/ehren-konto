generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  userId    Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  email     String   @unique @db.VarChar(100)
  name      String   @db.VarChar(50)
  nick      String   @db.VarChar(15)
  avatar    String

  FriendshipOutgoing  Friendship[]          @relation("userOutgoingFriendships")
  FriendshipIncoming  Friendship[]          @relation("userIncomingFriendships")
  GroupMember         GroupMember[]
  ActivityParticipant ActivityParticipant[]
}

model Group {
  groupId      Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  name         String
  description  String
  GroupMembers GroupMember[]
  Activities   Activity[]
}

enum GroupMemberRole {
  ADMIN
  MEMBER
}

model GroupMember {
  groupMemberId Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())
  role          GroupMemberRole @default(MEMBER)
  ehre          Int             @default(0)
  Group         Group           @relation(fields: [groupId], references: [groupId])
  groupId       Int
  User          User            @relation(fields: [userId], references: [userId])
  userId        Int

  @@unique([userId, groupId])
}

model Friendship {
  friendshipId   Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  OutgoingUser   User     @relation("userOutgoingFriendships", fields: [outgoingUserId], references: [userId])
  outgoingUserId Int
  IncomingUser   User     @relation("userIncomingFriendships", fields: [incomingUserId], references: [userId])
  incomingUserId Int

  @@unique([outgoingUserId, incomingUserId])
}

enum ActivityColor {
  SUNSET
  MARS
}

model Activity {
  activityId Int           @id @default(autoincrement())
  createdAt  DateTime      @default(now())
  from       DateTime
  to         DateTime?
  name       String        @db.VarChar(50)
  emoji      String        @db.VarChar(20)
  color      ActivityColor
  Group      Group         @relation(fields: [groupId], references: [groupId])
  groupId    Int

  ActivityParticipants ActivityParticipant[]
}

model ActivityParticipant {
  activityParticipantId Int      @id @default(autoincrement())
  createdAt             DateTime @default(now())
  Activity              Activity @relation(fields: [activityId], references: [activityId])
  activityId            Int
  User                  User     @relation(fields: [userId], references: [userId])
  userId                Int
  confirmed             Boolean  @default(false)

  @@unique([activityId, userId])
}
