generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  userId    Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  email     String   @unique @db.VarChar(100)
  name      String   @db.VarChar(50)
  nick      String   @db.VarChar(15)
  avatar    String
  groups    Group[]  @relation("userGroups")

  FriendshipOutgoing Friendship[] @relation("userOutgoingFriendships")
  FriendshipIncoming Friendship[] @relation("userIncomingFriendships")
}

model Group {
  groupId     Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  name        String
  description String
  users       User[]   @relation("userGroups")
}

model Friendship {
  friendshipId   Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  outgoingUser   User     @relation("userOutgoingFriendships", fields: [outgoingUserId], references: [userId])
  outgoingUserId Int
  incomingUser   User     @relation("userIncomingFriendships", fields: [incomingUserId], references: [userId])
  incomingUserId Int
}

model Activity {
  activityId Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  from       DateTime
  to         DateTime?
  name       String    @db.VarChar(50)
  emoji      String    @db.VarChar(20)
}
