generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider = "prisma-kysely"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  userId               String    @id @default(dbgenerated("gen_random_uuid()"))
  createdAt            DateTime  @default(now())
  email                String    @unique @db.VarChar(100)
  name                 String    @db.VarChar(50)
  passwordHash         String    @db.VarChar(60)
  confirmedEmail       Boolean   @default(false)
  nick                 String    @db.VarChar(15)
  avatar               String?
  inviteLink           String?   @unique
  inviteLinkCreateDate DateTime?

  FriendshipOutgoing  Friendship[]          @relation("userOutgoingFriendships")
  FriendshipIncoming  Friendship[]          @relation("userIncomingFriendships")
  GroupMember         GroupMember[]
  ActivityParticipant ActivityParticipant[]
  Happenings          Happening[]
}

model Group {
  groupId      Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  name         String        @db.VarChar(150)
  description  String        @db.VarChar(250)
  GroupMembers GroupMember[]
  Activities   Activity[]
  Happenings   Happening[]
}

enum GroupMemberRole {
  ADMIN
  MEMBER
}

model GroupMember {
  groupMemberId Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())
  role          GroupMemberRole @default(MEMBER)
  ehre          Int             @default(0)
  Group         Group           @relation(fields: [groupId], references: [groupId], onDelete: Cascade)
  groupId       Int
  User          User            @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId        String

  @@unique([userId, groupId])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Friendship {
  friendshipId   Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  OutgoingUser   User             @relation("userOutgoingFriendships", fields: [outgoingUserId], references: [userId], onDelete: Cascade)
  outgoingUserId String
  IncomingUser   User             @relation("userIncomingFriendships", fields: [incomingUserId], references: [userId], onDelete: Cascade)
  incomingUserId String
  status         FriendshipStatus @default(PENDING)

  @@unique([outgoingUserId, incomingUserId])
}

enum ActivityColor {
  SUNSET
  MARS
  EHRE
}

model Activity {
  activityId Int           @id @default(autoincrement())
  createdAt  DateTime      @default(now())
  from       DateTime
  to         DateTime?
  name       String        @db.VarChar(50)
  emoji      String        @db.VarChar(50)
  color      ActivityColor
  Group      Group         @relation(fields: [groupId], references: [groupId], onDelete: Cascade)
  groupId    Int

  ActivityParticipants ActivityParticipant[]
  Happenings           Happening[]
}

model ActivityParticipant {
  activityParticipantId Int      @id @default(autoincrement())
  createdAt             DateTime @default(now())
  Activity              Activity @relation(fields: [activityId], references: [activityId], onDelete: Cascade)
  activityId            Int
  User                  User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId                String
  confirmed             Boolean  @default(false)

  @@unique([activityId, userId])
}

enum HappeningType {
  ACTIVITY_PARTICIPATION
  ACTIVITY_PARTICIPATION_CONFIRMED
  ACTIVITY_PARTICIPATION_REMOVED
  GROUP_CREATED
  GROUP_DELETED
  GROUP_MEMBER_ADDED
  GROUP_MEMBER_REMOVED
  FRIENDSHIP_REQUEST
  FRIENDSHIP_ACCEPTED
}

model Happening {
  happeningsId Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  type         HappeningType

  happeningData Json

  RelatedGroup   Group? @relation(fields: [relatedGroupId], references: [groupId], onDelete: Cascade)
  relatedGroupId Int?

  RelatedActivity   Activity? @relation(fields: [relatedActivityId], references: [activityId], onDelete: Cascade)
  relatedActivityId Int?

  RelatedUser   User?   @relation(fields: [relatedUserId], references: [userId], onDelete: Cascade)
  relatedUserId String?
}
